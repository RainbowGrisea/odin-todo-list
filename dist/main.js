/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ (() => {

eval("/*  To-do list project\n\nclick on add project/group ( project list on sidebar? )\nclick on add new item - title and description\nProjects has a description and to-do items / checklist\nedit list item ( priority / order / color / check mark / )\nrender function - DOM manipulation\n\n*/\n\nconst projectList = [];\nlet currentProject = {};\nlet currentTask = {};\n\nfunction Project( name, description ) {\n  this.name = name || 'default';\n  this.description = description;\n  this.tasks = [];\n  pushProject( this );\n}\n\nfunction Task( text, priority, checked, dueDate ) {\n  this.text = text;\n  this.priority = priority || 'normal';\n  this.checked = checked || false ;\n  this.dueDate = dueDate;\n  pushTask( this );\n}\n\nfunction pushProject( project ) {\n  projectList.push( project );\n}\n\nfunction pushTask( task ) {\n  currentProject.tasks.push( task );\n}\n\nfunction deleteProject( number ) {\n  projectList.splice( number, 1 );\n  render();\n}\n\nfunction deleteTask( number ) {\n  currentProject.tasks.splice( number, 1 );\n  render();\n};\n\nfunction moveUp( number ) {\n  if ( number === 0 ) return;\n  const tempObj = Object.assign( projectList[ number - 1 ] );\n  projectList[ number - 1 ] = { ... projectList[ number ] };\n  projectList[ number ] = { ... tempObj };\n}\n\nfunction moveDown( number ) {\n  if ( number === currentProject.tasks.length - 1 ) return;\n  const tempObj = Object.assign( projectList[ number + 1 ] );\n  projectList[ number + 1 ] = { ... projectList[ number ] };\n  projectList[ number ] = { ... tempObj };\n}\n\nfunction switchProject ( projectNumber ) {\n  currentProject = projectList[ projectNumber ];\n}\n\n// Update display\nfunction render( ) {\n  \n  const projectListDiv = document.querySelector( '.projectList' );\n  const projectTitle = document.querySelector( '.projectTitle' );\n  const projectDescription = document.querySelector( '.projectDescription' );\n  const taskList = document.querySelector( '.projectTasks' );\n  \n  projectListDiv.innerHTML = '';\n  projectTitle.innerHTML = currentProject.name;\n  projectDescription.innerHTML = currentProject.description;\n  taskList.innerHTML = '';\n\n  // Render project list on nav bar\n  for ( let proj = 0; proj < projectList.length; proj++ ) {\n    const projectDiv = document.createElement( 'div' );\n    const projectButton = document.createElement( 'button' );\n    const deleteProjectButton = document.createElement( 'button' );\n\n    projectDiv.classList.add( 'projectDiv' );\n    deleteProjectButton.type = 'button';\n    deleteProjectButton.innerHTML = '&times;';\n    deleteProjectButton.classList.add( 'deleteButton' );\n    projectButton.classList.add( 'projectNameButton' );\n    projectButton.innerHTML = projectList[ proj ].name;\n    projectButton.addEventListener( 'click', () => {\n      currentProject = projectList[ proj ];\n      render();\n    } )\n    projectDiv.appendChild( projectButton );\n    projectDiv.appendChild( deleteProjectButton );\n    projectListDiv.appendChild( projectDiv )\n\n    deleteProjectButton.addEventListener( 'click', () => {\n      deleteProject( proj );\n    })\n  };\n\n  // Render selected project and its tasks\n  for ( let taskNumber = 0; taskNumber < currentProject.tasks.length; taskNumber++ ) {\n    const taskDiv = document.createElement( 'div' );\n    const checkbox = document.createElement( 'input' );\n    const taskLabel = document.createElement( 'label' );\n    const editButton = document.createElement( 'button' );\n    const deleteButton = document.createElement( 'button' );\n\n    editButton.innerHTML = 'edit';\n    editButton.type = 'button';\n    editButton.classList.add( 'editButton' );\n    taskDiv.id = 'task' + taskNumber;\n    checkbox.type = 'checkbox';\n    checkbox.id = 'item' + taskNumber;\n    checkbox.checked = currentProject.tasks[ taskNumber ].checked;\n    taskLabel.innerHTML = currentProject.tasks[ taskNumber ].text;\n    taskLabel.htmlFor = 'item' + taskNumber;\n    deleteButton.type = 'button';\n    deleteButton.innerHTML = '&times;';\n    deleteButton.classList.add( 'deleteButton' );\n\n    switch ( currentProject.tasks[ taskNumber ].priority ) {\n      case 'low': {\n        taskDiv.classList.add( \"lowPriority\" );\n      }        \n        break;\n\n      case 'medium': {\n        taskDiv.classList.add( \"mediumPriority\" );\n      }        \n        break;\n    \n      case 'high': {\n        taskDiv.classList.add( \"highPriority\" );\n      }        \n        break;\n    \n      default: {\n        taskDiv.classList.add( \"lowPriority\" );\n      }     \n        break;\n    }\n    \n    taskDiv.appendChild( checkbox );\n    taskDiv.appendChild( taskLabel );\n    taskDiv.appendChild( editButton );\n    taskDiv.appendChild( deleteButton );\n    taskList.appendChild( taskDiv );\n\n    deleteButton.addEventListener( 'click', () => {\n      deleteTask( taskNumber );\n    } )\n\n    editButton.addEventListener( 'click', () => {\n      showEditTaskModal( taskNumber );\n    })\n    \n    checkbox.addEventListener( 'click', function changeCheckedStatus() {\n      currentProject.tasks[ taskNumber ].checked = this.checked;\n    });\n  }\n}\n\nconst createProjectButton = document.querySelector( '.newProjectButton' );\ncreateProjectButton.addEventListener( 'click', () => {\n  showModal();\n});\n\nconst closeButtons = document.querySelectorAll( '.closeButton' );\nfor ( let i = 0; i < closeButtons.length; i++ ){\n  closeButtons[ i ].addEventListener( 'click', () => {\n    closeModal( closeButtons[ i ] );\n  })\n}\n\nfunction showModal( ) {\n  const modal = document.querySelector( '#projectModal' );\n  modal.style.display = 'flex';\n}\n\nfunction closeModal( button ) {\n  let parent;\n  function findModal( button ) {\n    parent = button.parentElement;\n    const classes = Array.from( parent.classList ); \n    if ( classes.includes( 'modal' ) ) {\n      parent.style.display = 'none';\n    } else { findModal( parent ) }\n  }\n  findModal( button );\n  clearModal( parent )  \n}\n\nfunction clearModal( modal ) {\n  const inputs = document.querySelectorAll( 'input' );\n  for ( let i = 0; i < inputs.length; i++ ){\n    inputs[ i ].value = '';\n  } \n}\n\nconst addNewProjectButton = document.querySelector( '.modalCreateProjectButton');\naddNewProjectButton.addEventListener( 'click', () => {\n  const modalElement = addNewProjectButton.parentElement;\n  const name = modalElement.querySelector( '#projectName' ).value;\n  const description = modalElement.querySelector( '#projectDescription' ).value;\n  addNewProject( name, description );\n})\n\nfunction addNewProject ( name, description ){\n  const newProj = new Project( name, description );\n  clearModal();\n  render();\n  closeModal( addNewProjectButton );\n}\n\nfunction showTaskModal( ) {\n  const taskModal = document.querySelector( '#taskModal' );\n  taskModal.style.display = 'flex';\n}\n\nfunction showEditTaskModal( taskNumber ) {\n  currentTask = currentProject.tasks[ taskNumber ];\n  currentTask.taskNumber = taskNumber;\n  const editTaskModal = document.querySelector( '#editTaskModal' );\n  editTaskModal.style.display = 'flex';\n  editTaskModal.querySelector( '#taskDescription' ).value = currentTask.text;\n  editTaskModal.querySelector( '#taskPriority' ).value = currentTask.priority;\n  editTaskModal.querySelector( '#dueDate' ).value = currentTask.dueDate;\n}\n\nconst addTaskButton = document.querySelector( '.addTaskButton');\naddTaskButton.addEventListener( 'click', () => {\n  showTaskModal();\n})\n\nconst addNewTaskButton = document.querySelector( '.taskCreateButton');\naddNewTaskButton.addEventListener( 'click', () => {\n  const modalElement = addNewTaskButton.parentElement;\n  const description = modalElement.querySelector( '#taskDescription' ).value;\n  const priority = modalElement.querySelector( '#taskPriority' ).value;\n  addNewTask( description, priority );\n})\n\nfunction addNewTask  ( description, priority ){\n  const newTask = new Task( description, priority );\n  clearModal();\n  render();\n  closeModal( addNewTaskButton );\n}\n\nconst taskEditSaveButton = document.querySelector( '.taskEditSave');\ntaskEditSaveButton.addEventListener( 'click', () => {\n  taskEditSave( currentTask.taskNumber );\n})\n\nfunction taskEditSave ( taskNumber ) {\n  currentTask.text = editTaskModal.querySelector( '#taskDescription' ).value;\n  currentTask.priority = editTaskModal.querySelector( '#taskPriority' ).value;\n  currentTask.dueDate = editTaskModal.querySelector( '#dueDate' ).value;\n  render();\n  closeModal( taskEditSaveButton );\n  delete currentTask.taskNumber;\n  currentTask = {};\n}\n\n// Dummy projects and tasks\nconst defaultProject = new Project( 'Default project', 'This is a default project with many interesting tasks. Feel free to edit, or create a new project.', '1 week' );\ncurrentProject = defaultProject;\nnew Task( 'first task', 'high' ), new Task( 'second', 'medium' ), new Task( 'notthethrid', 'low' ), new Task( 'last', 'medium' );\nconst defaultProject2 = new Project( 'Second project', 'Here we go again. You can switch between projects.', 'Now' );\ncurrentProject = defaultProject2;\nnew Task( 'wow', 'low' ), new Task( 'second', 'medium' ), new Task( 'again', 'low' ), new Task( 'fourth', 'medium' );\n\ncurrentProject = defaultProject;\nrender();\n\n\n//# sourceURL=webpack://odin-todo-list/./src/index.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./src/index.js"]();
/******/ 	
/******/ })()
;